import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from treating_data.items_ratings_treated import items


def build_cosine_similarity_matrix(rating_matrix: pd.DataFrame) -> pd.DataFrame:
    # aqui usamos a matriz transposta pois a funcao cosine_similarity calcula a similaridade entre as linhas
    # e queremos calcular a similaridade entre os filmes, nao os usuarios
    similarity_between_movies = cosine_similarity(rating_matrix.T)

    df_similarity_between_movies = pd.DataFrame(similarity_between_movies, index=rating_matrix.columns, columns=rating_matrix.columns)

    return df_similarity_between_movies

def generate_recommendations(rating_matrix: pd.DataFrame, movieId: int) -> list:

    similarity_matrix = build_cosine_similarity_matrix(rating_matrix=rating_matrix)

    list_of_recommendations = similarity_matrix[movieId].sort_values(ascending=False).index

    # this list comprehension contains the titles of the recommendations instead of the id's
    # so it is ready to print for the user
    return [items[items['movieId'] == recommendation]['title'].iloc[0] for recommendation in list_of_recommendations[1:6]]

if __name__ == "__main__":   
    similarity_matrix = build_cosine_similarity_matrix(rating_matrix=rating_matrix)

    # print(similarity_matrix.head())
    # print(max(similarity_matrix[2]))

    recommendations = generate_recommendations(similarity_matrix=similarity_matrix, movie_id=58559)


    print(f"Recommendations for the movie {items[items['movieId'] == recommendations.index[0]]['title'].iloc[0]}:")
    # print(items[items['movieId'] == recommendations.index[0]]['title'].iloc[0])

    for movieId in recommendations.index[1:]:
        print(items[items['movieId'] == movieId]["title"].iloc[0])

    print("These recommendations were generated by cosine similarity!")
